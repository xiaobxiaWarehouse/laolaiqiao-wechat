<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd">
    <!--===================================-->
    <!-- @Autowired @Required @Resource注入 --> 
    <!--===================================-->
    <context:annotation-config/>

    <!--======================================================================-->
    <!-- 扫描并注册标记有@Component @Controller @Service @Repository的Bean-->
    <!--======================================================================-->
    <context:component-scan base-package="com.codi.laolaiqiao"/>
    
    <!-- 引入配置文件 -->  
    <bean id="propertyConfigurer"  
        class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
        <property name="location" value="classpath:jdbc.properties" />  
    </bean>
    
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
	    <property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}"/>
		<property name="username" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="30"/>
		<!-- 连接池最大使用连接数量 -->
		<property name="maxActive" value="200"/>
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="0"/>
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="60000"/>
		<property name="validationQuery" value="select 1"/>
		<property name="testOnBorrow" value="false"/>
		<property name="testOnReturn" value="false"/>
		<property name="testWhileIdle" value="true"/>
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000"/>
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="25200000"/>
		<!-- 打开removeAbandoned功能 -->
		<property name="removeAbandoned" value="true"/>
		<!-- 1800秒，也就是30分钟 -->
		<property name="removeAbandonedTimeout" value="18000"/>
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true"/>
		<property name="filters" value="stat"/>
	</bean>
	
	<!-- 分页插件 -->
	<bean id="pagePlugin" class="com.codi.base.dao.plugin.page.PagePlugin">
		<property name="properties">
			<props>
				<prop key="dialect">mysql</prop>
				<prop key="pageSqlId">.*query.*</prop>
			</props>
		</property>
	</bean>
  
    <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->  
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
        <property name="dataSource" ref="dataSource" />
        <property name="typeAliasesPackage" value="com.codi.laolaiqiao.domain" /> 
        <!-- 自动扫描mapping.xml文件 -->  
        <property name="mapperLocations" value="classpath*:mybatis/*.xml"></property>
        <property name="plugins">
			<array>
				<ref bean="pagePlugin" />
			</array>
		</property>
    </bean>  
  
   <!-- DAO接口所在包名，Spring会自动查找其下的类 -->  
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
        <property name="basePackage" value="com.codi.laolaiqiao.dao" />  
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>  
    </bean>
  
    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->  
    <bean id="transactionManager"  
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
        <property name="dataSource" ref="dataSource" />  
    </bean>
    
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />

</beans>